#!/usr/bin/env bash

PS4='[script/test:${LINENO}] $ '
set -euo pipefail
set -x

# Install deps and make sure gem passes its own rake
bundle
bundle exec rake
cd example
bundle

# Avoid test pollution by clearing out any initial state that might be lingering
cd ..
./script/reset_example_app

# Exercise the example app
cd example
bin/rake db:setup

# Test basic initial usage
bin/rake test_data:install
bin/rake test_data:dump
bin/rails test test/integration/basic_boops_test.rb
bundle exec rspec spec/requests/boops_spec.rb
bin/rails test test/integration/mode_switching_demo_test.rb
bin/rails test test/integration/better_mode_switching_demo_test.rb
bin/rails test test/integration/parallel_boops_with_fixtures_test.rb
bin/rails test test/integration/parallel_boops_without_fixtures_test.rb

# Verify the out-of-date database warning system works (step 1)
mkdir -p tmp/dump-backup-1
cp test/support/test_data/* tmp/dump-backup-1

# Test using the test_data env to interactively create test data
RAILS_ENV=test_data rails runner "5.times { Boop.create! }"
bin/rake test_data:dump
bin/rails test test/integration/updated_boops_test.rb

# Verify the out-of-date database warning system works (step 2)
mkdir -p tmp/dump-backup-2
cp test/support/test_data/* tmp/dump-backup-2
cp tmp/dump-backup-1/* test/support/test_data
if ! bin/rake test_data:reinitialize 2>&1 | grep -q "\[test_data:warn\] Your local test_data database 'example_test_data' is associated"; then
  echo "Expected to be warned that the SQL dump was older than the database, but there was no warning."
  exit 1
fi
TEST_DATA_CONFIRM=true bin/rake test_data:reinitialize
cp tmp/dump-backup-2/* test/support/test_data
if ! RAILS_ENV=test_data bin/rails runner "" 2>&1 | grep -q "\[test_data:warn\] The SQL dumps in 'test/support/test_data' were created"; then
  echo "Expected to be warned that the SQL dump was newer than the database, but there was no warning."
  exit 1
fi
if bin/rake test_data:reinitialize 2>&1 | grep -q "\[test_data:warn\]"; then
  echo "Expected NOT to be warned that the SQL dump was older than the database, but a warning was printed."
  exit 1
fi
TEST_DATA_CONFIRM=true bin/rake test_data:reinitialize
if RAILS_ENV=test_data bin/rails runner "" 2>&1 | grep -q "\[test_data:warn\]"; then
  echo "Expected NOT to be warned that the SQL dump was newer than the database, but a warning was printed."
  exit 1
fi

# Test a migration being added and run and an out-of-date dump being loaded
cp ../test/fixtures/20210418220133_add_beep_to_boops.rb db/migrate
cp ../test/fixtures/20210624180810_create_pants.rb db/migrate
cp ../test/fixtures/pant.rb app/models
cp ../test/fixtures/pants.yml test/fixtures
bin/rake db:migrate
bin/rake db:test:prepare
bin/rake test_data:drop_database
bin/rake test_data:load
RAILS_ENV=test_data bin/rake db:migrate
bin/rake test_data:dump
bin/rails test test/integration/migrated_boops_test.rb

# Run a test that commits test data thru to the database
bin/rails test test/integration/transaction_committing_boops_test.rb

# Run a test that prevents Rails fixtures for preloading and then loads them in a transaction
bin/rails test test/integration/rails_fixtures_override_test.rb
bundle exec rspec spec/requests/rails_fixtures_override_spec.rb
bin/rails test test/integration/fixture_load_count_test.rb

# Run a test that forgets to prevent Rails fixtures but then tries to load them in a transaction
bin/rails test test/integration/rails_fixtures_double_load_test.rb

# Add a second migration, this time without wiping the test_data db and with a table we want to ignore
cp ../test/fixtures/20210423114916_add_table_we_want_to_ignore.rb db/migrate
cp ../test/fixtures/chatty_audit_log.rb app/models
bin/rake db:migrate
RAILS_ENV=test_data bin/rake db:migrate
RAILS_ENV=test_data rails runner "50.times { ChattyAuditLog.create!(message: 'none of this matters') }"
# Gsub config file and uncomment + add table to excluded table list
ruby -e '
  path = "config/initializers/test_data.rb"
  IO.write(path, File.open(path) { |f|
    f.read.gsub("# config.dont_dump_these_tables = []", "config.dont_dump_these_tables = [\"chatty_audit_logs\"]")
  })
'
bin/rake test_data:dump
if grep -q "INSERT INTO public.chatty_audit_logs" "test/support/test_data/data.sql"; then
  echo "Dump contained excluded table 'chatty_audit_logs'"
  exit 1
fi
bin/rake db:test:prepare
bin/rails test test/integration/dont_dump_tables_test.rb
bin/rails test test/integration/load_rollback_truncate_test.rb

# Test circular FK constraints
cp ../test/fixtures/20210423190737_add_foreign_keys.rb db/migrate/
cp ../test/fixtures/boop_with_other_boops.rb app/models/boop.rb
RAILS_ENV=test_data bin/rake db:migrate
bin/rake test_data:dump
bin/rake db:migrate db:test:prepare
bin/rails test test/integration/boops_that_boop_boops_test.rb

# Make sure it loads cleanly again
bin/rake test_data:drop_database
bin/rake test_data:load
bin/rails test test/integration/boops_that_boop_boops_test.rb

# Test all the after hooks!
cp ../test/fixtures/20210729130542_add_materialized_meta_boop_view.rb db/migrate/
cp ../test/fixtures/meta_boop.rb app/models/meta_boop.rb
# Gsub config file to switch to structure.sql b/c materialized view
ruby -e '
  path = "config/application.rb"
  IO.write(path, File.open(path) { |f|
    f.read.gsub("# config.active_record.schema_format = :sql", "config.active_record.schema_format = :sql")
  })
'
rm db/schema.rb
bin/rake db:migrate db:test:prepare
RAILS_ENV=test_data bin/rake db:migrate
bin/rake test_data:dump
bin/rails test test/integration/test_data_hooks_test.rb

# Cleanup
cd ..
./script/reset_example_app

echo "You win!"
